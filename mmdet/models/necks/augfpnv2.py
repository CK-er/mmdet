import torch.nn as nn
import torch.nn.functional as F
# from mmcv.cnn import xavier_init
import torch
# from ..utils import ConvModule
from mmcv.cnn import ConvModule, xavier_init
# from ..registry import NECKS
from ..builder import NECKS


@NECKS.register_module
class AugFPN(nn.Module):

    def __init__(self,
                 in_channels,
                 out_channels,
                 num_outs,
                 pool_ratios=[0.1, 0.2, 0.3],
                 start_level=0,
                 end_level=-1,
                 add_extra_convs=False,
                 norm_cfg=None,
                 act_cfg=None,
                 # normalize=None,
                 # activation=None
                 ):
        super(AugFPN, self).__init__()
        assert isinstance(in_channels, list)
        self.in_channels = in_channels
        self.out_channels = out_channels
        self.num_ins = len(in_channels)
        self.num_outs = num_outs
        # self.activation = activation
        self.norm_cfg = norm_cfg
        self.act_cfg = act_cfg
        self.with_bias = norm_cfg is None

        if end_level == -1:  # self.backbone_end_level: 理解为用来计数 需要计算的FPN的最后层数，要么为给定值，要么为输入的channel的数量
            self.backbone_end_level = self.num_ins
            assert num_outs >= self.num_ins - start_level  # 判断 输出scale数是否合理
        else:
            # if end_level < inputs, no extra level is allowed
            self.backbone_end_level = end_level  # 此时 end_level不等于-1
            assert end_level <= len(in_channels)  # 判断 end_level是否在合理范围内
            assert num_outs == end_level - start_level  # 判断 输出scale数 是否合理
        self.start_level = start_level
        self.end_level = end_level
        self.add_extra_convs = add_extra_convs

        self.lateral_convs = nn.ModuleList()
        self.fpn_convs = nn.ModuleList()
        #  当添加 nn.ModuleList 作为 nn.Module 对象的一个成员时（即当我们添加模块到我们的网络时），
        #  所有 nn，Module 内部的 nn.Module 的parameter 也被添加作为我们网络的parameter.
        for i in range(self.start_level, self.backbone_end_level):
            # in_channels, out_channels, kernel_size, stride=1, padding=0, dilation=1, groups=1,同nn.Conv2d
            l_conv = ConvModule(
                in_channels[i],
                out_channels,
                1,
                padding=0,
                norm_cfg=norm_cfg,
                bias=self.with_bias,
                act_cfg=self.act_cfg,
                inplace=False)
            # # 1，in_channels, out_channels, kernel_size, stride=1, padding=0, dilation=1, groups=1,同nn.Conv2d
            # # 2, bias (bool | str): True\False\Auto
            # # 如果是Auto，偏差由norm_cfg决定
            # # norm_cfg is None,bias=True;否则 bias=False
            # # 3, norm_cfg (dict):正则化层的配置字典Default: None.
            # # 4，act_cfg (dict): Config dict for activation layer.
            # # Default: dict(type='ReLU').
            # # 5，inplace (bool): Whether to use inplace mode for activation.
            # # Default: True.
            # # 6，with_spectral_norm (bool): Whether use spectral norm in conv module.
            # # Default: False.
            # # 7，padding_mode (str): 如果目前的pytorch中的 Conv2d 不支持该 padding_mode，使用自定义的padding layer。目前，该卷积模块支持官方的 [‘zeros’, ‘circular’] 和自己实现的[‘reflect’]。 Default: 'zeros'.
            # # 8，order (tuple[str]): conv/norm/activation layers的顺序. “conv”, “norm” and “act”.常见的有 ("conv", "norm", "act") and ("act", "conv", "norm"). Default: ('conv', 'norm', 'act').

            fpn_conv = ConvModule(
                out_channels,
                out_channels,
                3,
                padding=1,
                norm_cfg=norm_cfg,
                bias=self.with_bias,
                act_cfg=self.act_cfg,
                inplace=False)

            self.lateral_convs.append(l_conv)
            self.fpn_convs.append(fpn_conv)

        ###################################GSA#########################################################
        self.pre_lateral_conv = nn.ModuleList()
        self.pre_lateral_conv = nn.Sequential(nn.Conv2d(2, 1, kernel_size=7, padding=7 // 2, bias=False),
                                              nn.Sigmoid())  # padding=kernel_size//2

        # # add lateral conv for features generated by rato-invariant scale adaptive pooling
        self.adaptive_pool_output_ratio = pool_ratios
        self.high_lateral_conv = nn.ModuleList()
        self.high_lateral_conv.extend(
            [nn.Conv2d(in_channels[-1], out_channels, 1) for k in range(len(self.adaptive_pool_output_ratio))])
        self.high_lateral_conv_attention = nn.Sequential(
            nn.Conv2d(out_channels * (len(self.adaptive_pool_output_ratio)), out_channels, 1), nn.ReLU(),
            nn.Conv2d(out_channels, len(self.adaptive_pool_output_ratio), 3, padding=1))

        # add extra conv layers (e.g., RetinaNet
        extra_levels = num_outs - self.backbone_end_level + self.start_level
        # 判断是否有除原层数之外的多余层数
        # faster_rcnn 中 self.add_extra_convs 为false
        if add_extra_convs and extra_levels >= 1:
            for i in range(extra_levels):
                in_channels = (self.in_channels[self.backbone_end_level - 1]
                               if i == 0 else out_channels)
                extra_fpn_conv = ConvModule(
                    in_channels,
                    out_channels,
                    3,
                    stride=2,
                    padding=1,
                    norm_cfg=norm_cfg,
                    bias=self.with_bias,
                    act_cfg=self.act_cfg,
                    inplace=False)
                self.fpn_convs.append(extra_fpn_conv)

    # default init_weights for conv(msra) and norm in ConvModule
    def init_weights(self):
        """Initialize the weights of FPN module."""
        for m in self.modules():
            if isinstance(m, nn.Conv2d):
                xavier_init(m, distribution='uniform')
        for m in self.high_lateral_conv_attention.modules():
            if isinstance(m, nn.Conv2d):
                xavier_init(m, distribution='uniform')

    def forward(self, inputs):
        assert len(inputs) == len(self.in_channels)

        # # build bottom-up path
        # used_backbone_levels = len(inputs)
        # for i in range(used_backbone_levels):
        # # for i in range(self.start_level, self.backbone_end_level):
        #     # print(i)
        #     avg_out = torch.mean(inputs[i], dim=1, keepdim=True)
        #     max_out, _ = torch.max(inputs[i], dim=1, keepdim=True)
        #     inputs[i] = torch.cat([avg_out, max_out], dim=1)
        #     inputs[i] = self.pre_lateral_conv(inputs[i])
        #     # inputs[i] = self.pre_lateral_conv(torch.cat([avg_out, max_out], dim=1))
        #     prev_shape = inputs[i+1].shape[2:]
        #     inputs[i+1] += F.interpolate(inputs[i], size=prev_shape, mode='nearest') * inputs[i+1]
        # # return tuple(inputs)

        # build laterals
        # 卷积核 和 步长 都为 1 的横向卷积
        laterals = [
            lateral_conv(inputs[i + self.start_level])
            for i, lateral_conv in enumerate(self.lateral_convs)
        ]

        # build bottom-up path
        used_backbone_levels = len(laterals)
        for i in range(used_backbone_levels - 1):
            # for i in range(self.start_level, self.backbone_end_level):
            # print(i)
            avg_out = torch.mean(laterals[i], dim=1, keepdim=True)
            max_out, _ = torch.max(laterals[i], dim=1, keepdim=True)
            # laterals[i] = torch.cat([avg_out, max_out], dim=1)
            # laterals[i] = self.pre_lateral_conv(laterals[i])
            gsa = torch.cat([avg_out, max_out], dim=1)
            gsa = self.pre_lateral_conv(gsa)
            # inputs[i] = self.pre_lateral_conv(torch.cat([avg_out, max_out], dim=1))
            # for c in range(len(self.out_channels))
            #     x = torch.cat(x, dim=1)
            # print(i)
            prev_shape = laterals[i + 1].shape[2:]
            # print(prev_shape)
            # h, w = laterals[i+1].size(2), laterals[i+1].size(3)
            # x = F.interpolate(x, size=prev_shape, mode='nearest')
            # laterals[i + 1] += F.interpolate(gsa, size=prev_shape, mode='nearest') * laterals[i+1]
            laterals[i + 1] = laterals[i + 1] + F.interpolate(gsa, size=prev_shape, mode='nearest') * laterals[i + 1]
            # shape = laterals[i + 1].shape[:]
            # print(shape)
        # return tuple(inputs)

        #  Residual Feature Augmentation
        h, w = inputs[-1].size(2), inputs[-1].size(3)
        #  Ratio Invariant Adaptive Pooling
        AdapPool_Features = [F.upsample(self.high_lateral_conv[j](F.adaptive_avg_pool2d(inputs[-1], output_size=(
        max(1, int(h * self.adaptive_pool_output_ratio[j])), max(1, int(w * self.adaptive_pool_output_ratio[j]))))),
                                        size=(h, w), mode='bilinear', align_corners=True) for j in
                             range(len(self.adaptive_pool_output_ratio))]
        Concat_AdapPool_Features = torch.cat(AdapPool_Features, dim=1)
        fusion_weights = self.high_lateral_conv_attention(Concat_AdapPool_Features)
        fusion_weights = F.sigmoid(fusion_weights)
        adap_pool_fusion = 0
        for i in range(len(self.adaptive_pool_output_ratio)):
            adap_pool_fusion += torch.unsqueeze(fusion_weights[:, i, :, :], dim=1) * AdapPool_Features[i]

        # # for Consistent Supervision
        # raw_laternals = [laterals[i].clone() for i in range(len(laterals))]

        # build top-down path
        laterals[-1] += adap_pool_fusion  # M6+M5=P5
        used_backbone_levels = len(laterals)

        for i in range(used_backbone_levels - 1, 0, -1):  # 倒序
            # In some cases, fixing `scale factor` (e.g. 2) is preferred, but
            #  it cannot co-exist with `size` in `F.interpolate`.
            laterals[i - 1] += F.interpolate(
                laterals[i], scale_factor=2, mode='nearest')
            ###############add to concat#############################################
            # laterals[i-1] = torch.cat([laterals[i], F.interpolate(laterals[i], scale_factor=2, mode='nearest')], 0)

            # input (Tensor) – the input tensor
            # size (int or Tuple[int] or Tuple[int, int] or Tuple[int, int, int]) – output spatial size.
            # scale_factor (float or Tuple[float]) – multiplier for spatial size. Has to match input size if it is a tuple.
            # mode (str) – algorithm used for upsampling: 'nearest' | 'linear' | 'bilinear' | 'bicubic' |'trilinear' | 'area'. Default: 'nearest'
            # align_corners (bool, optional) – Geometrically, we consider the pixels of the input and output as squares rather than points.
            # If set to True, the input and output tensors are aligned by the center points of their corner pixels, preserving the values at the corner pixels.
            # If set to False, the input and output tensors are aligned by the corner points of their corner pixels, and the interpolation uses edge value padding for out-of-boundary values, making this operation independent of input size when scale_factor is kept the same.
            # This only has an effect when mode is 'linear', 'bilinear', 'bicubic' or 'trilinear'. Default: False

        # build outputs
        # part 1: from original levels
        outs = [
            self.fpn_convs[i](laterals[i]) for i in range(used_backbone_levels)
        ]
        # 注意此时 针对 叠加的每一层的结果，又进行了一次卷积，是因为 消除上采样带来的影响。
        # 文章原话为：Finally, we append a 3×3 convolution on each merged map to generate the final feature map, which is to reduce the aliasing effect of upsampling.

        # part 2: add extra levels
        if self.num_outs > len(outs):
            # use max pool to get more levels on top of outputs
            # (e.g., Faster R-CNN, Mask R-CNN)
            if not self.add_extra_convs:
                for i in range(self.num_outs - used_backbone_levels):
                    outs.append(F.max_pool2d(outs[-1], 1, stride=2))
            # add conv layers on top of original feature maps (RetinaNet)
            else:
                orig = inputs[self.backbone_end_level - 1]
                outs.append(self.fpn_convs[used_backbone_levels](orig))
                for i in range(used_backbone_levels + 1, self.num_outs):
                    # BUG: we should add relu before each extra conv
                    outs.append(self.fpn_convs[i](outs[-1]))
        # return tuple(outs), tuple(raw_laternals)
        return tuple(outs)
